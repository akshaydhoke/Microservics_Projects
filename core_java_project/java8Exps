https://www.softwaretestinghelp.com/java-8-interview-questions/
https://blog.devgenius.io/java-8-coding-and-programming-interview-questions-and-answers-62512c44f062

https://www.geeksforgeeks.org/how-to-find-duplicate-elements-in-a-stream-in-java/


*** Most Imp for realworld problem ***
Real time problem solving : 
https://javaconceptoftheday.com/solving-real-time-queries-using-java-8-features-employee-management-system/

>> minBy, maxBy, partitioningBy and groupingBy

> Employee ee =   employeeList.stream().filter(i -> i.getName()=="Bhumika").min(Comparator.comparingDouble(Employee::getSalary)).get();
> Employee ee =   employeeList.stream().filter(i -> i.getName()=="Bhumika").collect(Collectors.minBy(Comparator.comparingDouble(Employee::getSalary))).get();
> Map<Boolean, List<Employee>> em = employeeList.stream().collect(Collectors.partitioningBy(i -> i.getGender()=="Male"));
	    Set<Entry<Boolean, List<Employee>>> es	= em.entrySet();
	    for(Entry<Boolean, List<Employee>> entry: es) {
	    	System.out.println(entry.getValue());
	    }

++++++++++++++++++++++++++++++++++

1) How do you print ten random numbers using forEach?

Random random = new Random();
random.ints().limit(10).forEach(System.out::println);

===================================
// https://www.geeksforgeeks.org/stream-max-method-java-examples/

2) How do you get the highest number that exists on a list?
To get all max.min,sum,average outpus as result using following method :

List<Integer> numbers = Arrays.asList(3, 2, 2, 3, 7, 3, 5);
IntSummaryStatistics	intStream = numbers.stream().mapToInt(i -> i).summaryStatistics();
System.out.println(intStream.getMax());

+++++++++++++++++++++++++++++++++++
2.1) Max element :
Integer[] numbers = {3, 2, 2, 3, 7, 3, 5};
Integer intVal = Arrays.stream(numbers).max(Comparator.naturalOrder()).get();
System.out.println(intVal);

// Integer intVal = Arrays.stream(numbers).max(Integer::compare).get();

// String MAX = list.stream().max(Comparator.comparing(String::valueOf)).get();

+++++++++++++++++++++++++++++++++++

2.2) Max String element in String Array : 

// Here, the Comparator compares the strings based on their last characters and returns the maximum value accordingly The result is stored in variable MAX 
String[] array = { "Geeks", "for", "GeeksforGeeks", "GeeksQuiz" }; 
String maxString =  Arrays.stream(array).max((s1,s2)-> Character.compare(s1.charAt(s1.length()-1), s2.charAt(s2.length()-1))).get();
System.out.println(maxString);

===================================
3) How to find duplicate elements in a Stream in Java

Integer[] arr1 = new Integer[] { 1, 9, 8, 7, 7, 8, 9 };

Set<Integer> set=new HashSet<>();
	        
List<Integer> list = Stream.of(arr1).filter(i -> !set.add(i)).toList();
System.out.println(list);

+++++++++++++++++++++++++++++++++++
3.1) Remove duplicates from List

Set<Integer> intList = 	Stream.of(arr1).collect(Collectors.toSet());
System.out.println(Arrays.toString(intList.toArray()));

===================================
4) What is MetaSpace in Java 8?

Answer: In Java 8, a new feature was introduced to store classes. The area where all the classes that are stored in Java 8 are called MetaSpace. MetaSpace has replaced the PermGen.

Till Java 7, PermGen was used by Java Virtual Machine to store the classes. Since MetaSpace is dynamic as it can grow dynamically and it does not have any size limitation, Java 8 replaced PermGen with MetaSpace

===================================
5)Grouping by element by its no of occurences : 

String string="I am akshay I am akshay";
String[] listOfStr=string.split(" ");
		
Map<Object, Long> words=Arrays.stream(listOfStr).collect(Collectors.groupingBy(i->i,Collectors.counting()));
System.out.println(words);

===================================
6) Stream of String to char
String str = "Abcbdddefgg";
Stream<Object> ss = str.chars().mapToObj(c -> (char)c);

Map<Object,Long> ss = str.chars().mapToObj(c -> (char)c).collect(Collectors.groupingBy(Function.identity(),Collectors.counting()));
System.out.println(ss);

===================================
7) Given a String, find the first repeated character in it using Stream functions?

String input = "Java articles are Awesome";

Stream<Entry<Character, Long>> charList = input.chars()
		    		.mapToObj(c -> Character.toLowerCase((char)c))
		    		.collect(Collectors.groupingBy(Function.identity(),LinkedHashMap::new,Collectors.counting()))
		    		.entrySet().stream();
		    
System.out.println(Arrays.toString(charList.toArray())); // [j=1, a=5, v=1,  =3, r=2, t=1, i=1, c=1, l=1, e=4, s=2, w=1, o=1, m=1]

		   Character cc = input.chars()
		    		.mapToObj(c -> Character.toLowerCase((char)c))
		    		.collect(Collectors.groupingBy(Function.identity(),LinkedHashMap::new,Collectors.counting()))
		    		.entrySet()
		    		.stream()
		    		.filter(entry -> entry.getValue()>1l)
		    		.map(entry -> entry.getKey())
		    		.findFirst()
		    		.get();
		    
System.out.println(cc); // a

# Another way :: 

String input = "Java articles are Awesome";
Set<Character> set=new HashSet<>();
Stream<Character> charList =input.chars().mapToObj(c -> (char)c).filter(c -> set.add(c));
System.out.println(Arrays.toString(charList.toArray()));
            
char ccc = input.chars().mapToObj(c -> (char)c).filter(c -> set.add(c)).findFirst().get();
System.out.println(ccc);

===================================
8) Given an integer array nums, return true if any value appears at least twice in the array, and return false if every element is distinct.

public boolean containsDuplicate(int[] nums) {
    List<Integer> list = Arrays.stream(nums)
                               .boxed()
                               .collect(Collectors.toList());
    Set<Integer> set = new HashSet<>(list);
     if(set.size() == list.size()) {
       return false;
   } 
      return true;
  }

Input: nums = [1,2,3,1]
Output: true

Input: nums = [1,2,3,4]
Output: false

===================================
9) How to find only duplicate elements with its count from the String ArrayList in Java8?

      List<String> names = Arrays.asList("AA", "BB", "AA", "CC");
      Map<String,Long> namesCount = names
                                   .stream()
                       .filter(x->Collections.frequency(names, x)>1)
                       .collect(Collectors.groupingBy
                       (Function.identity(), Collectors.counting()));
      System.out.println(namesCount);
      
===================================
10) How to check if list is empty in Java 8 using Optional, if not null iterate through the list and print the object?

			List<Employee> empList = Arrays.asList(emp1,emp2,emp3,emp4);
//			List<Employee> empList =null;
			Optional.ofNullable(empList).orElseGet(Collections::emptyList).stream().filter(Objects::nonNull).forEach(System.out::println);

===================================
11) o/p: 3EMAN~2EMAN~1EMAN

		List<String> list=Arrays.asList("name1","name2","name3","name4");

	    String str = list.parallelStream().limit(3).sorted(Collections.reverseOrder()).collect(StringBuilder::new,(builder, curObj) -> builder.append(curObj.toUpperCase().toString()).reverse().append("~"),StringBuilder::append).toString();
		System.out.println(str.substring(0,str.length()-1)); // 3EMAN~2EMAN~1EMAN
		

